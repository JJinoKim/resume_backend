let jwt,decode,User;_a06‍.x([["default",()=>_a06‍.o]]);_a06‍.w("jsonwebtoken",[["default",["jwt"],function(v){jwt=v}],["decode",["decode"],function(v){decode=v}]]);_a06‍.w("../models/user",[["default",["User"],function(v){User=v}]]);


const jwtMiddleware = async (ctx, next) => {
    const token = ctx.cookies.get('access_token');
    if(!token) return next(); // 토큰이 없음
    try{
        const decoded = jwt.verify(token, process.env.JWT_SECRET);
        ctx.state.user = {
            _id : decoded._id,
            userId : decoded.userId,
            username : decoded.username,
        };

        // 토큰의 남은 유효 기간이 3.5일 미만이면 재발급
        const now = Math.floor(Date.now() / 1000);
        if (decoded.exp - now < 60 * 60 * 24 * 3.5) {
            const user = await User.findById(decoded._id);
            const token = user.generateToken();
            ctx.cookies.set('access_token', token, {
                maxAge: 1000 * 60 * 60 * 24 * 7, // 7일
                httpOnly: true,
            });
        }
        // console.log(ctx.state.user);
        return next();
    }catch(e){
        console.log('토큰 검증 실패');
        return next();
    }
};

_a06‍.d(jwtMiddleware);